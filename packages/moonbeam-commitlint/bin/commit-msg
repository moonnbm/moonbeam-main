#!/bin/sh

# Check where the Husky executable lives depending on the type of package
# ToDo: this should be enabled in case we use this outside of the main repository.
#if [ -d "$(dirname "$0")/_/" ]; then
#  . "$(dirname "$0")/_/husky.sh"
#
#elif [ -d "$(dirname "$1")/.husky/_/" ]; then
#  . "$(dirname "$1")/.husky/_/husky.sh"
#fi
#
# ToDo: this should be enabled in case we want to use different commit formats for different branches.
#branch="$(git rev-parse --abbrev-ref HEAD)"
#if [ "$branch" = "mainline" ]; then fi

. "$(dirname "$0")/_/husky.sh"
npx --no -- commitlint --edit $1 || (echo "Commitlint failed, expected format is:
#######################################################################################
<type>[mandatory scope]: <description>

[optional body]

[optional footer(s)]

# Example 1:
#
########################################################################################
# <ticket>:          needs to start with one of: ['MOONBM-']
# <scopes>:          representing the sub-package/package in the scope of the commit. There can be  1 to many scopes, which must
#                    be separated by a comma (,) - in case multiple items are passed in (with NO SPACES in BETWEEN).
#                    can be one of: [<{sub_package_name_auto_generated}>, <{mono_repo_name_auto_generated}>]
# <subject>:         representing the commit message of your commit. Free-form, no restrictions here, other than the size being a max of 72 characters.
# <>:                means REQUIRED, will always need to get replaced by some content
#
# For more information on what committing standards we use, refer to: https://www.conventionalcommits.org/en/v1.0.0/#specification
# For more information on how we enforce these rules, refer to: https://github.com/moonnbm/moonbeam-main/tree/main/packages/moonbeam-commitlint
" && (exit 1))
